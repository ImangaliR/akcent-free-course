// components/Subtitles/SubtitlePanel.jsx
import { Eye, EyeOff, Languages, Volume2 } from "lucide-react";
import { useEffect, useMemo, useRef, useState } from "react";

export const SubtitlePanel = ({
  subtitles = [],
  currentTime = 0,
  onSeekToTime,
  className = "",
}) => {
  const [showPanel, setShowPanel] = useState(true);
  const [showTranslations, setShowTranslations] = useState(true);
  const [activeSubtitle, setActiveSubtitle] = useState(null);
  const [selectedWord, setSelectedWord] = useState(null);

  // –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–º—É
  const listRef = useRef(null);

  // —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—É–±—Ç–∏—Ç—Ä (–∏–¥—ë—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å)
  useEffect(() => {
    const current = subtitles.find(
      (sub) => currentTime >= sub.start && currentTime <= sub.end
    );
    setActiveSubtitle(current || null);
  }, [currentTime, subtitles]);

  // —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã (end < now)
  const pastSubtitles = useMemo(
    () => subtitles.filter((s) => currentTime > s.end),
    [subtitles, currentTime]
  );

  // –¥–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–Ω–∏–∑, –∫–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
  useEffect(() => {
    if (!listRef.current) return;
    listRef.current.scrollTop = listRef.current.scrollHeight;
  }, [pastSubtitles.length]);

  const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, "0")}`;
  };

  const handleSubtitleClick = (subtitle) => {
    onSeekToTime?.(subtitle.start);
  };

  if (!showPanel) {
    return (
      <div className={`w-80 bg-white rounded-lg shadow-lg p-4 ${className}`}>
        <div className="flex items-center justify-between">
          <h4 className="font-semibold text-gray-800">–°—É–±—Ç–∏—Ç—Ä—ã</h4>
          <button
            onClick={() => setShowPanel(true)}
            className="p-2 hover:bg-gray-100 rounded-lg text-gray-600"
            aria-label="–ü–æ–∫–∞–∑–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã"
          >
            <Eye size={20} />
          </button>
        </div>
        <p className="text-sm text-gray-500 mt-2">–°—É–±—Ç–∏—Ç—Ä—ã —Å–∫—Ä—ã—Ç—ã</p>
      </div>
    );
  }

  return (
    <div className={`w-80 bg-white rounded-lg shadow-lg ${className}`}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="p-4 border-b">
        <div className="flex items-center justify-between gap-2">
          <h4 className="font-semibold text-gray-800">–°—É–±—Ç–∏—Ç—Ä—ã</h4>
          <div className="flex items-center gap-1">
            {/* –ü–µ—Ä–µ–≤–æ–¥ –≤–∫–ª/–≤—ã–∫–ª */}
            <button
              onClick={() => setShowTranslations((v) => !v)}
              className={`inline-flex items-center gap-1 px-2 py-1 rounded-md text-sm
                ${
                  showTranslations
                    ? "bg-green-50 text-green-700"
                    : "bg-gray-100 text-gray-600"
                }
              `}
              aria-pressed={showTranslations}
              aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥"
              title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥"
            >
              <Languages size={16} />
              {showTranslations ? "–ü–µ—Ä–µ–≤–æ–¥: –≤–∫–ª" : "–ü–µ—Ä–µ–≤–æ–¥: –≤—ã–∫–ª"}
            </button>

            {/* –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å */}
            <button
              onClick={() => setShowPanel(false)}
              className="p-2 hover:bg-gray-100 rounded-lg text-gray-600"
              aria-label="–°–∫—Ä—ã—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã"
              title="–°–∫—Ä—ã—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã"
            >
              <EyeOff size={20} />
            </button>
          </div>
        </div>
      </div>

      {/* –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å—É–±—Ç–∏—Ç—Ä */}
      {activeSubtitle && (
        <div className="p-4 bg-blue-50 border-b">
          <div className="font-medium text-gray-800">
            {activeSubtitle.russian}
          </div>
          {showTranslations && (
            <div className="text-sm text-gray-600 mt-1">
              {activeSubtitle.english}
            </div>
          )}
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –¢–û–õ–¨–ö–û –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ */}
      <div ref={listRef} className="flex-1 overflow-y-auto max-h-96">
        {pastSubtitles.length === 0 ? (
          <div className="p-4 text-sm text-gray-500">
            –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–Ω–æ üôä
          </div>
        ) : (
          pastSubtitles.map((subtitle) => (
            <div
              key={subtitle.id}
              className="p-3 border-b cursor-pointer transition-colors duration-200 bg-green-50 hover:bg-green-100"
              onClick={() => handleSubtitleClick(subtitle)}
              title="–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–æ–º—É –º–æ–º–µ–Ω—Ç—É"
            >
              {/* –í—Ä–µ–º—è */}
              <div className="flex items-center justify-between mb-2">
                <span className="text-xs text-gray-500 font-mono">
                  {formatTime(subtitle.start)}
                </span>
                <div className="w-2 h-2 bg-green-500 rounded-full" />
              </div>

              {/* –†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç */}
              <div className="text-sm font-medium text-gray-800 mb-1">
                {subtitle.russian}
              </div>

              {/* –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ ‚Äî –ø–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—é */}
              {showTranslations && (
                <div className="text-xs text-gray-600">{subtitle.english}</div>
              )}
            </div>
          ))
        )}
      </div>

      {/* –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–∫–∞–∫ –±—ã–ª–æ) */}
      {selectedWord && (
        <div className="p-4 border-t bg-yellow-50">
          <div className="flex items-center gap-2 mb-2">
            <Volume2 size={16} className="text-gray-600" />
            <h5 className="font-semibold text-gray-800">–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ</h5>
          </div>
          <div className="space-y-1">
            <div className="flex items-center gap-2">
              <span className="font-medium text-blue-800 text-lg">
                {selectedWord.word}
              </span>
              <span className="text-gray-600">‚Äî</span>
              <span className="text-gray-700">{selectedWord.translation}</span>
            </div>
            <div className="text-sm text-gray-600">
              –í—Ä–µ–º—è: {formatTime(selectedWord.start)} ‚Äì{" "}
              {formatTime(selectedWord.end)}
            </div>
          </div>
          <button
            onClick={() => setSelectedWord(null)}
            className="mt-2 text-xs text-gray-500 hover:text-gray-700"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      )}
    </div>
  );
};
